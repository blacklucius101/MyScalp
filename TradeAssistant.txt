//+------------------------------------------------------------------+
//|                                               TradeAssistant.mq5 |
//|                                                      @mobilebass |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2023, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"
#property description "TradeAssistant"

//--- Input parameters for trade levels
input group "Trade Levels (in Points)"
input int InpTakeProfit = 5000;       // Take Profit in points
input int InpStopLoss = 70000;         // Stop Loss in points
input int InpTrailingStop = 0;       // Trailing Stop in points (0 = disabled)
input int InpTrailingStep = 1;        // Trailing Step in points
input int InpStartTrailingPoint = 5001; // Start Trailing Point in points

//--- Input parameter for lot size
input group "Lot Size Management"
input double InpLotSize = 0.0;        // Lot size (0.0 = dynamic calculation)

input group "Signal Line Settings"; // New group for these settings
input double InpSignalThreshold = 61.8; // Threshold percentage (0-100)

//--- Input parameter for trade execution type
input group "Trade Execution"
enum EnumExecutionType
  {
   EXECUTE_IMMEDIATE,     // Execute immediately on button press
   EXECUTE_ON_NEXT_CANDLE // Execute on the open of the next candle
  };
input EnumExecutionType InpExecutionType = EXECUTE_IMMEDIATE; // Trade execution type

//--- Input parameters for visual elements (e.g., button labels, colors) - to be added later if needed

// Include Trade library
#include <Trade\Trade.mqh>

//--- Data structure for signal tracking
struct SignalData
  {
   datetime candleTime;     // Time of the signal candle
   double   triggerPrice;   // Price where arrow appeared (high for bearish, low for bullish)
   double   thresholdPrice; // Calculated threshold price
   bool     signalUsed;     // Flag if signal has been used
   double   candleRange;    // Range of the signal candle (high-low)
  };

// Global instance of CTrade
CTrade trade;
long जी_EXPERT_MAGIC_NUMBER = 198705; // Example Magic Number

//--- Global variables for UI element names
string g_buyButtonName = "BuyButton";
string g_sellButtonName = "SellButton";
string g_execTypeButtonName = "ExecTypeButton"; // Name for the new execution type toggle button
string g_pendingIndicatorName = "PendingTradeIndicator"; // Name for the pending trade visual indicator

//--- Line properties for retracement levels
const string g_bullishEntryLinePrefix = "BullishEntryTA_";
const string g_bearishEntryLinePrefix = "BearishEntryTA_";
const string g_bullishFormingLineName = g_bullishEntryLinePrefix + "CurrentForming"; // Name for the dynamic bullish line on the forming candle
const string g_bearishFormingLineName = g_bearishEntryLinePrefix + "CurrentForming";   // Name for the dynamic bearish line on the forming candle
const color  g_bullishLineColor = clrAqua;
const color  g_bearishLineColor = clrMagenta;
const int    g_lineWidth = 1; // Changed from 5 to 2 for less visual clutter
const ENUM_LINE_STYLE g_lineStyle = STYLE_DOT;
const int    g_lineDurationBars = 1; // How many bars the line should span (increased from 5 for better visibility)

//--- Global variables for pending "next candle" trades
ENUM_ORDER_TYPE g_pendingOrderType = WRONG_VALUE; // Stores pending order type
bool g_tradeOnNextCandlePending = false;     // Flag for pending next candle trade

//--- Global variable to hold the current execution type state
EnumExecutionType g_currentExecutionType;

SignalData g_arrowBearish;    // Stores bearish signal data
SignalData g_arrowBullish;    // Stores bullish signal data
int g_zzSemaforHandle = INVALID_HANDLE; // Handle for Single_Level_ZZ_Semafor indicator
//+------------------------------------------------------------------+
//| Execute Trade Operation                                          |
//+------------------------------------------------------------------+
void ExecuteTrade(ENUM_ORDER_TYPE orderType)
  {
   // Initial assumption: a pending trade is being processed or an immediate trade is requested.
   // Flags will be reset and indicator updated *after* the attempt or if pre-checks fail.

   if(orderType != ORDER_TYPE_BUY && orderType != ORDER_TYPE_SELL)
     {
      Print("ExecuteTrade: Invalid order type specified.");
      g_tradeOnNextCandlePending = false; 
      g_pendingOrderType = WRONG_VALUE;
      ObjectSetInteger(0, g_pendingIndicatorName, OBJPROP_BGCOLOR, clrLightGray);
      ChartRedraw();
      return;
     }

   double lot = CalculateLotSize();
   if(lot <= 0)
     {
      Print("ExecuteTrade: Invalid lot size calculated: ", lot);
      g_tradeOnNextCandlePending = false; 
      g_pendingOrderType = WRONG_VALUE;
      ObjectSetInteger(0, g_pendingIndicatorName, OBJPROP_BGCOLOR, clrLightGray);
      ChartRedraw();
      return;
     }

   // Get previous candle data
   double prevHigh = iHigh(_Symbol, _Period, 1);
   double prevLow = iLow(_Symbol, _Period, 1);
   double prevRange = prevHigh - prevLow;
   
   // Check retracement condition
   double currentPrice = 0;
   bool retracementConditionMet = false;
   
   if(orderType == ORDER_TYPE_BUY)
   {
      currentPrice = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
      if(currentPrice == 0) return;
      
      // BUY CONDITION: Price must rise ABOVE retracement level
      double requiredRetracementPrice = prevLow + (InpSignalThreshold / 100.0) * prevRange;
      retracementConditionMet = (currentPrice >= requiredRetracementPrice); // Changed to >=
      
      if(!retracementConditionMet)
      {
         Print("Buy condition not met: Need price >=", requiredRetracementPrice);
         return;
      }
   }
   else if(orderType == ORDER_TYPE_SELL)
   {
      currentPrice = SymbolInfoDouble(_Symbol, SYMBOL_BID);
      if(currentPrice == 0) return;
      
      // SELL condition: Price must drop BELOW retracement level
      double requiredRetracementPrice = prevHigh - (InpSignalThreshold / 100.0) * prevRange;
      retracementConditionMet = (currentPrice <= requiredRetracementPrice);
      
      if(!retracementConditionMet)
      {
         Print("Sell condition not met: Need price <=", requiredRetracementPrice);
         return;
      }
   }

   double slPrice = 0.0;
   double tpPrice = 0.0;
   string comment = "";
   bool tradeExecutedOrAttempted = false; // Flag to track if we proceed to reset flags and indicator

   if(orderType == ORDER_TYPE_BUY)
     {
      slPrice = (InpStopLoss > 0) ? currentPrice - InpStopLoss * _Point : 0.0;
      tpPrice = (InpTakeProfit > 0) ? currentPrice + InpTakeProfit * _Point : 0.0;
      comment = "Buy executed by EA";
      Print("Attempting BUY: Lot=", lot, ", Price=", DoubleToString(currentPrice, _Digits), ", SL=", DoubleToString(slPrice, _Digits), ", TP=", DoubleToString(tpPrice, _Digits));
      if(!trade.Buy(lot, _Symbol, currentPrice, slPrice, tpPrice, comment))
        {
         Print("Buy order failed: ", trade.ResultRetcode(), " - ", trade.ResultRetcodeDescription());
        }
      else
        {
         Print("Buy order successful. Position #", trade.ResultOrder());
        }
      tradeExecutedOrAttempted = true;
     }
   else if(orderType == ORDER_TYPE_SELL)
     {
      slPrice = (InpStopLoss > 0) ? currentPrice + InpStopLoss * _Point : 0.0;
      tpPrice = (InpTakeProfit > 0) ? currentPrice - InpTakeProfit * _Point : 0.0;
      comment = "Sell executed by EA";
      Print("Attempting SELL: Lot=", lot, ", Price=", DoubleToString(currentPrice, _Digits), ", SL=", DoubleToString(slPrice, _Digits), ", TP=", DoubleToString(tpPrice, _Digits));
      if(!trade.Sell(lot, _Symbol, currentPrice, slPrice, tpPrice, comment))
        {
         Print("Sell order failed: ", trade.ResultRetcode(), " - ", trade.ResultRetcodeDescription());
        }
      else
        {
         Print("Sell order successful. Position #", trade.ResultOrder());
        }
      tradeExecutedOrAttempted = true;
     }

   if(tradeExecutedOrAttempted)
     {
      // Reset pending flags as the trade was attempted (either successfully or not)
      g_tradeOnNextCandlePending = false;
      g_pendingOrderType = WRONG_VALUE;
      // Reset the indicator color as the pending action is resolved
      ObjectSetInteger(0, g_pendingIndicatorName, OBJPROP_BGCOLOR, clrLightGray);
      ChartRedraw(); 
     }
  }

//+------------------------------------------------------------------+
//| Create Button Object                                             |
//+------------------------------------------------------------------+
void CreateButton(string name, string text, int x, int y, int width, int height, color bgColor, color textColor, int corner = 0, int fontSize = 8) // CORNER_RIGHT_UPPER = 1 by default if not specified
  {
   if(ObjectFind(0, name) != 0) // If object doesn't exist
     {
      if(!ObjectCreate(0, name, OBJ_BUTTON, 0, 0, 0))
        {
         Print("Error creating button ", name, ": ", GetLastError());
         return;
        }
     }

   ObjectSetString(0, name, OBJPROP_TEXT, text);
   ObjectSetInteger(0, name, OBJPROP_XDISTANCE, x);
   ObjectSetInteger(0, name, OBJPROP_YDISTANCE, y);
   ObjectSetInteger(0, name, OBJPROP_XSIZE, width);
   ObjectSetInteger(0, name, OBJPROP_YSIZE, height);
   ObjectSetInteger(0, name, OBJPROP_CORNER, corner);
   ObjectSetInteger(0, name, OBJPROP_BGCOLOR, bgColor);
   ObjectSetInteger(0, name, OBJPROP_COLOR, textColor);
   ObjectSetInteger(0, name, OBJPROP_FONTSIZE, fontSize);
   ObjectSetInteger(0, name, OBJPROP_STATE, 0); // false
   ObjectSetInteger(0, name, OBJPROP_SELECTABLE, 0); // false
   ObjectSetInteger(0, name, OBJPROP_BACK, 0); // false - Keep button on top
   ObjectSetInteger(0, name, OBJPROP_ZORDER, 0); // Typically 0 is foreground for buttons
  }

//+------------------------------------------------------------------+
//| Calculate Lot Size                                               |
//+------------------------------------------------------------------+
double CalculateLotSize()
  {
   // If InpLotSize is explicitly set by input (greater than 0), use it after normalization.
   if(InpLotSize > 0.0)
     {
      // Normalize user-defined lot size against symbol's volume constraints
      double userLotSize = InpLotSize;
      double volumeMin = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MIN);
      double volumeMax = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MAX);
      double volumeStep = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_STEP);

      // Adjust to minimum volume if user lot is too small
      if(userLotSize < volumeMin) userLotSize = volumeMin;
      // Adjust to maximum volume if user lot is too large
      if(userLotSize > volumeMax) userLotSize = volumeMax;
      
      // Align to volume step
      userLotSize = MathFloor(userLotSize / volumeStep) * volumeStep;
      if (userLotSize < volumeMin) userLotSize = volumeMin; // Re-check after flooring

      return(NormalizeDouble(userLotSize, 2)); // Standard normalization to 2 decimal places
     }

   // If InpLotSize is 0.0, calculate lot size based on account balance.
   // Example: 0.01 lot for every 1000 units of account currency balance.
   // This is a common but arbitrary rule; adjust the factor (e.g., 1000.0) as needed for your risk strategy.
   double calculatedLotSize = AccountInfoDouble(ACCOUNT_BALANCE) / 1000.0;

   // Get symbol volume information for dynamic calculation
   double volumeMin = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MIN);
   double volumeMax = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MAX);
   double volumeStep = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_STEP);

   // Normalize calculated lot size
   // Adjust to minimum volume if calculated lot is too small
   if(calculatedLotSize < volumeMin)
     {
      calculatedLotSize = volumeMin;
     }
   // Adjust to maximum volume if calculated lot is too large
   else if(calculatedLotSize > volumeMax)
     {
      calculatedLotSize = volumeMax;
     }
   // Align to volume step
   else
     {
      // Round to the nearest step, then ensure it's not below min or above max
      calculatedLotSize = MathRound(calculatedLotSize / volumeStep) * volumeStep;
      if(calculatedLotSize < volumeMin) calculatedLotSize = volumeMin;
      if(calculatedLotSize > volumeMax) calculatedLotSize = volumeMax;
     }
   
   // Final normalization (usually to 2 decimal places for lots)
   // The step calculation should ideally handle precision, but this is a safeguard.
   return(NormalizeDouble(calculatedLotSize, 2));
  }

//+------------------------------------------------------------------+
//| Reset signal data structure                                      |
//+------------------------------------------------------------------+
void ResetSignalDataTA(SignalData &data)
  {
   data.candleTime = 0;
   data.triggerPrice = 0;
   data.thresholdPrice = 0;
   data.signalUsed = false;
   data.candleRange = 0;
  }

//+------------------------------------------------------------------+
//| Draw entry level line                                            |
//+------------------------------------------------------------------+
void DrawEntryLineTA(string prefix, datetime signalTime, double price, color lineColor)
  {
   string lineName = prefix + TimeToString(signalTime, TIME_MINUTES); // Using TIME_MINUTES for unique names per bar

   // Calculate end time (signal time + duration in bars on the current chart timeframe)
   // PeriodSeconds() returns the number of seconds in the current chart period.
   datetime endTime = signalTime + PeriodSeconds() * g_lineDurationBars;

   // Delete old line if exists to prevent duplicates if called rapidly for the same signalTime
   if(ObjectFind(0, lineName) != -1)
     {
      ObjectDelete(0, lineName);
     }

   // Create the trend line
   if(!ObjectCreate(0, lineName, OBJ_TREND, 0, signalTime, price, endTime, price))
     {
      Print("Failed to create entry line '", lineName, "'! Error: ", GetLastError());
      return;
     }

   ObjectSetInteger(0, lineName, OBJPROP_COLOR, lineColor);
   ObjectSetInteger(0, lineName, OBJPROP_WIDTH, g_lineWidth);
   ObjectSetInteger(0, lineName, OBJPROP_STYLE, g_lineStyle);
   ObjectSetInteger(0, lineName, OBJPROP_RAY_RIGHT, false); // Ensure line doesn't extend indefinitely
   ObjectSetInteger(0, lineName, OBJPROP_SELECTABLE, false);
   ObjectSetInteger(0, lineName, OBJPROP_BACK, true); // Draw behind price chart
   ObjectSetString(0, lineName, OBJPROP_TOOLTIP, prefix + " Level"); // Add a tooltip

   // ChartRedraw(); // Redraw is handled by the calling function (e.g., ProcessNewBarTA) if needed
  }

//+------------------------------------------------------------------+
//| Clean up old entry lines                                         |
//| This function deletes lines based on two conditions:             |
//| 1. Expiry time is reached (line is older than g_lineDurationBars). |
//| 2. The semafor arrow associated with the line has repainted      |
//|    (i.e., is no longer present on the signal candle).            |
//+------------------------------------------------------------------+
void CleanUpOldLinesTA()
  {
   datetime currentTime = TimeCurrent();
   // Calculate expiration time: lines older than 'currentTime - (PeriodSeconds() * (g_lineDurationBars + buffer))' are considered expired.
   // A small buffer (e.g., 2 bars) is added to ensure lines are visible for their intended duration
   // and to account for timing differences in execution.
   datetime expirationTimeThreshold = currentTime - (PeriodSeconds() * (g_lineDurationBars + 2)); // +2 bar buffer

   int totalObjects = ObjectsTotal(0, 0, OBJ_TREND); // Only iterate over OBJ_TREND objects for efficiency
   bool chartNeedsRedraw = false; // Flag to indicate if a redraw might be needed (handled by OnTick)

   for(int i = totalObjects - 1; i >= 0; i--) // Iterate backwards as we might delete objects
     {
      string name = ObjectName(0, i, 0, OBJ_TREND);
      bool isBullishLine = (StringFind(name, g_bullishEntryLinePrefix) == 0);
      bool isBearishLine = (StringFind(name, g_bearishEntryLinePrefix) == 0);

      if(isBullishLine || isBearishLine)
        {
         datetime lineCreationTime = (datetime)ObjectGetInteger(0, name, OBJPROP_TIME, 0);
         bool deleteLine = false;

         // Condition 1: Expiry time reached
         if(lineCreationTime < expirationTimeThreshold)
           {
            deleteLine = true;
            Print("CleanUpOldLinesTA: Deleting line '", name, "' due to time expiration.");
           }

         // Condition 2: Semafor arrow repainted (only if not already marked for deletion by time)
         if(!deleteLine && g_zzSemaforHandle != INVALID_HANDLE)
           {
            // Determine the bar index for lineCreationTime
            int barShift = iBarShift(_Symbol, _Period, lineCreationTime);
            if(barShift < 0) // Error or time too far in the past
              {
               // Print("CleanUpOldLinesTA: Could not find bar shift for line '", name, "' at time ", TimeToString(lineCreationTime), ". Skipping repaint check.");
               continue; // Skip repaint check if barShift is invalid
              }

            double arrowValue = 0;
            int bufferIndex = -1;

            if(isBullishLine)
              {
               bufferIndex = 0; // Low arrow for bullish signal
              }
            else // isBearishLine
              {
               bufferIndex = 1; // High arrow for bearish signal
              }

            double tempBuffer[];
            if(CopyBuffer(g_zzSemaforHandle, bufferIndex, barShift, 1, tempBuffer) == 1)
              {
               arrowValue = tempBuffer[0];
              }
            else
              {
               Print("CleanUpOldLinesTA: Error copying ZZ Semafor buffer for line '", name, "', barShift ", barShift, ". Error: ", GetLastError());
               // Decide how to handle this error: skip check or assume repaint? For safety, let's skip.
               continue; 
              }
            
            // If arrowValue is 0 (or EMPTY_VALUE, though indicator usually plots > 0 for arrow)
            // it means the semafor is no longer present at that bar on that buffer.
            if(arrowValue == 0 || arrowValue == EMPTY_VALUE)
              {
               deleteLine = true;
               Print("CleanUpOldLinesTA: Deleting line '", name, "' due to semafor repaint (arrow no longer at ", TimeToString(lineCreationTime), ").");
              }
           }
         else if (!deleteLine && g_zzSemaforHandle == INVALID_HANDLE)
           {
             // If handle is invalid, we can't check for repaint, so only time-based deletion applies.
             // Print("CleanUpOldLinesTA: ZZ Semafor handle invalid, skipping repaint check for line '", name, "'.");
           }


         if(deleteLine)
           {
            ObjectDelete(0, name);
            chartNeedsRedraw = true;
           }
        }
     }

   if(chartNeedsRedraw)
     {
      // ChartRedraw(); // Redraw is handled by OnTick
     }
  }

//+------------------------------------------------------------------+
//| Update or Create Forming Line for current candle                 |
//+------------------------------------------------------------------+
void UpdateFormingLineTA(string lineName, datetime barTime, double price, color lineColor)
  {
   bool lineExists = (ObjectFind(0, lineName) != -1);
   double existingPrice = 0;

   if(lineExists)
     {
      existingPrice = ObjectGetDouble(0, lineName, OBJPROP_PRICE, 0);
      // If price hasn't changed, no need to update
      if(MathAbs(price - existingPrice) < (_Point / 2.0)) // Compare with tolerance
        {
         // Optional: Update end time if line should always extend to current bar's end + 1 period
         // datetime expectedEndTime = barTime + PeriodSeconds();
         // datetime currentEndTime = (datetime)ObjectGetInteger(0, lineName, OBJPROP_TIME, 1);
         // if(currentEndTime != expectedEndTime) {
         //    ObjectSetInteger(0, lineName, OBJPROP_TIME, 1, expectedEndTime);
         // }
         return;
        }
      ObjectDelete(0, lineName); // Delete to redraw at new price
     }

   // Create or recreate the trend line for the forming bar
   // The line will span from the start of the current bar to the end of the current bar
   datetime endTime = barTime + PeriodSeconds(); 

   if(!ObjectCreate(0, lineName, OBJ_TREND, 0, barTime, price, endTime, price))
     {
      Print("Failed to create/update forming line '", lineName, "'! Error: ", GetLastError());
      return;
     }

   ObjectSetInteger(0, lineName, OBJPROP_COLOR, lineColor);
   ObjectSetInteger(0, lineName, OBJPROP_WIDTH, g_lineWidth);
   ObjectSetInteger(0, lineName, OBJPROP_STYLE, g_lineStyle);
   ObjectSetInteger(0, lineName, OBJPROP_RAY_RIGHT, false);
   ObjectSetInteger(0, lineName, OBJPROP_SELECTABLE, false);
   ObjectSetInteger(0, lineName, OBJPROP_BACK, true);
   ObjectSetString(0, lineName, OBJPROP_TOOLTIP, StringSubstr(lineName, StringLen(g_bullishEntryLinePrefix)) + " Level (Forming)"); // Dynamic tooltip
   // No ChartRedraw() here; OnTick will handle it.
  }

//+------------------------------------------------------------------+
//| Process New Bar for Signal Line Drawing                          |
//+------------------------------------------------------------------+
void ProcessNewBarTA()
  {
   if(g_zzSemaforHandle == INVALID_HANDLE)
     {
      // Print("ProcessNewBarTA: ZZ Semafor Indicator handle is invalid. Cannot process signals.");
      return;
     }

   // We're interested in the previous candle (c1) which just closed
   int c1 = 1; // Index of previous candle

   // Get candle data for c1 (signal candle)
   double c1High = iHigh(_Symbol, _Period, c1);
   double c1Low = iLow(_Symbol, _Period, c1);
   datetime c1Time = iTime(_Symbol, _Period, c1);
   double c1Range = c1High - c1Low;

   if(c1Range <= 0)
     {
      // Print("ProcessNewBarTA: Candle range for bar at ", TimeToString(c1Time), " is zero or negative. Skipping line processing for this bar.");
      return;
     }

   // --- Actual Signal Detection using Single_Level_ZZ_Semafor ---
   double highArrowBuffer[];
   double lowArrowBuffer[];
   bool newBearishSignal = false;
   bool newBullishSignal = false;

   // Attempt to copy data for the high arrow (bearish signal, buffer 1)
   if(CopyBuffer(g_zzSemaforHandle, 1, c1, 1, highArrowBuffer) == 1)
     {
      if(highArrowBuffer[0] > 0) // Signal if value is greater than 0
        {
         newBearishSignal = true;
        }
     }
   else
     {
      Print("ProcessNewBarTA: Error copying high arrow buffer from ZZ Semafor. Error: ", GetLastError());
     }

   // Attempt to copy data for the low arrow (bullish signal, buffer 0)
   if(CopyBuffer(g_zzSemaforHandle, 0, c1, 1, lowArrowBuffer) == 1)
     {
      if(lowArrowBuffer[0] > 0) // Signal if value is greater than 0
        {
         newBullishSignal = true;
        }
     }
   else
     {
      Print("ProcessNewBarTA: Error copying low arrow buffer from ZZ Semafor. Error: ", GetLastError());
     }
   // --- End of Actual Signal Detection ---

   bool lineDrawn = false; // Flag to check if we need to redraw chart

   // Check for bearish signal (high arrow from indicator)
   if(newBearishSignal)
     {
      g_arrowBearish.signalUsed = false; // Reset flag

      g_arrowBearish.candleTime = c1Time;
      g_arrowBearish.triggerPrice = c1High; // ZZ_Semafor_EA uses c1High as trigger for bearish
      g_arrowBearish.candleRange = c1Range;
      g_arrowBearish.thresholdPrice = NormalizeDouble(c1High - ((InpSignalThreshold / 100.0) * c1Range), _Digits);

      DrawEntryLineTA(g_bearishEntryLinePrefix, c1Time, g_arrowBearish.thresholdPrice, g_bearishLineColor);
      Print("ProcessNewBarTA: New Bearish Signal (ZZ Semafor) at ", TimeToString(c1Time), ". Threshold: ", DoubleToString(g_arrowBearish.thresholdPrice, _Digits));
      lineDrawn = true;
     }

   // Check for bullish signal (low arrow from indicator)
   if(newBullishSignal)
     {
      g_arrowBullish.signalUsed = false; // Reset flag

      g_arrowBullish.candleTime = c1Time;
      g_arrowBullish.triggerPrice = c1Low; // ZZ_Semafor_EA uses c1Low as trigger for bullish
      g_arrowBullish.candleRange = c1Range;
      g_arrowBullish.thresholdPrice = NormalizeDouble(c1Low + ((InpSignalThreshold / 100.0) * c1Range), _Digits);
      
      DrawEntryLineTA(g_bullishEntryLinePrefix, c1Time, g_arrowBullish.thresholdPrice, g_bullishLineColor);
      Print("ProcessNewBarTA: New Bullish Signal (ZZ Semafor) at ", TimeToString(c1Time), ". Threshold: ", DoubleToString(g_arrowBullish.thresholdPrice, _Digits));
      lineDrawn = true;
     }
   
   if(lineDrawn)
     {
      ChartRedraw(); // Redraw chart if any line was drawn
     }
  }

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
//--- Check for valid point size
   if(_Point == 0)
     {
      Print("Error: Invalid point size for symbol ", _Symbol, ". EA cannot continue.");
      return(INIT_FAILED);
     }

//--- Check if trading is allowed for the account
   if(!AccountInfoInteger(ACCOUNT_TRADE_ALLOWED))
     {
      Print("Trading is not allowed for this account.");
      return(INIT_FAILED);
     }

//--- Check if the EA is allowed to trade
   if(!MQLInfoInteger(MQL_TRADE_ALLOWED))
     {
      Print("Expert Advisor is not allowed to trade. Please check settings in Tools > Options > Expert Advisors.");
      return(INIT_FAILED);
     }

//--- Set Expert Magic Number
   trade.SetExpertMagicNumber(जी_EXPERT_MAGIC_NUMBER);
   // Optional: Set slippage if you have an input for it
   // trade.SetDeviationInPoints(InpSlippage); // Example if InpSlippage exists

//--- Initialize global execution type state from input
   g_currentExecutionType = InpExecutionType;

//--- Create UI Elements
   // CORNER_RIGHT_UPPER = 1 (Top-right corner of the chart)
   CreateButton(g_buyButtonName, "BUY", 90, 50, 70, 25, clrGreen, clrWhite, 1); // X, Y, Width, Height, BgColor, TextColor, Corner
   CreateButton(g_sellButtonName, "SELL", 10, 50, 70, 25, clrRed, clrWhite, 1);

   // Determine initial text for the execution type button
   string initialExecButtonText;
   if (g_currentExecutionType == EXECUTE_IMMEDIATE)
     initialExecButtonText = "Exec: Imm"; // Text for Immediate Execution
   else
     initialExecButtonText = "Exec: Next";  // Text for Next Candle Execution

   // Create the execution type toggle button
   CreateButton(g_execTypeButtonName, initialExecButtonText, 190, 50, 85, 25, clrBlue, clrWhite, 1, 8); // Name, Text, X, Y, Width, Height, BgColor, TextColor, Corner, FontSize

//--- Create Pending Trade Indicator (Rectangle Label)
   // Position to the right of ExecTypeButton: 250 (ExecX) + 85 (ExecWidth) + 10 (spacing) = 345
   if(ObjectCreate(0, g_pendingIndicatorName, OBJ_RECTANGLE_LABEL, 0, 0, 0))
     {
      ObjectSetInteger(0, g_pendingIndicatorName, OBJPROP_CORNER, 1); // CORNER_RIGHT_UPPER
      ObjectSetInteger(0, g_pendingIndicatorName, OBJPROP_XDISTANCE, 285); 
      ObjectSetInteger(0, g_pendingIndicatorName, OBJPROP_YDISTANCE, 50);
      ObjectSetInteger(0, g_pendingIndicatorName, OBJPROP_XSIZE, 25);
      ObjectSetInteger(0, g_pendingIndicatorName, OBJPROP_YSIZE, 25);
      ObjectSetInteger(0, g_pendingIndicatorName, OBJPROP_BGCOLOR, clrLightGray); // Initial neutral color
      ObjectSetInteger(0, g_pendingIndicatorName, OBJPROP_BORDER_TYPE, BORDER_FLAT); 
      ObjectSetInteger(0, g_pendingIndicatorName, OBJPROP_SELECTABLE, 0); 
      ObjectSetInteger(0, g_pendingIndicatorName, OBJPROP_BACK, 0); 
      ObjectSetString(0, g_pendingIndicatorName, OBJPROP_TOOLTIP, "Pending Trade Status");
     }
   else
     {
      Print("Error creating pending trade indicator object '", g_pendingIndicatorName, "': ", GetLastError());
     }

//--- Initialization successful
   Print("ZZ_Semafor_Visual_EA initialized successfully. Magic Number: ", जी_EXPERT_MAGIC_NUMBER);

//--- Load Custom Indicator for signals
   g_zzSemaforHandle = iCustom(NULL, 0, "Custom\\Single_Level_ZZ_Semafor");
   if(g_zzSemaforHandle == INVALID_HANDLE)
     {
      Print("Error: Failed to load Single_Level_ZZ_Semafor indicator. EA cannot continue.");
      // Optional: Alert the user
      // Alert("Failed to load Single_Level_ZZ_Semafor. Please ensure it is in the MQL5\Indicators\Custom directory.");
      return(INIT_FAILED);
     }
   else
     {
      Print("Single_Level_ZZ_Semafor indicator loaded successfully. Handle: ", g_zzSemaforHandle);
     }
//--- Initialize signal data structures
   ResetSignalDataTA(g_arrowBearish);
   ResetSignalDataTA(g_arrowBullish);
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   //--- Release custom indicator handle
   if(g_zzSemaforHandle != INVALID_HANDLE)
     {
      IndicatorRelease(g_zzSemaforHandle);
      Print("Single_Level_ZZ_Semafor indicator released. Handle: ", g_zzSemaforHandle);
      g_zzSemaforHandle = INVALID_HANDLE; // Reset handle after release
     }

   //--- Clean up created objects
   ObjectDelete(0, g_buyButtonName);
   ObjectDelete(0, g_sellButtonName);
   ObjectDelete(0, g_execTypeButtonName); // Delete the execution type button
   ObjectDelete(0, g_pendingIndicatorName); // Delete the pending trade indicator
   
   // ChartRedraw(); // Not strictly necessary in OnDeinit after object deletions, but doesn't harm.
  }
//+------------------------------------------------------------------+
//| Trailing Stop Logic                                              |
//+------------------------------------------------------------------+
void TrailingStopModifyOrders()
  {
   if(InpTrailingStop <= 0) // Trailing stop is disabled
      return;

   for(int i = PositionsTotal() - 1; i >= 0; i--) // Iterate through all open positions
     {
      if(PositionGetSymbol(i) == _Symbol) // Check if the position is for the current symbol
        {
         long positionTicket = PositionGetInteger(POSITION_TICKET);
         ENUM_POSITION_TYPE positionType = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);
         double openPrice = PositionGetDouble(POSITION_PRICE_OPEN);
         double currentSl = PositionGetDouble(POSITION_SL);
         double currentTp = PositionGetDouble(POSITION_TP); // Needed for PositionModify
         double currentPrice = 0;

         if(positionType == POSITION_TYPE_BUY)
           {
            currentPrice = SymbolInfoDouble(_Symbol, SYMBOL_BID);
            if(currentPrice == 0) 
              {
               continue; // Skip if price is not available
              }

            // Check if position is profitable enough to start trailing
            if(currentPrice >= openPrice + InpStartTrailingPoint * _Point)
              {
               double proposed_sl = currentPrice - InpTrailingStop * _Point;

               // Ensure new SL is above open price
               // Ensure new SL is an improvement over current SL
               // Ensure new SL respects the trailing step if current SL exists
               if(proposed_sl > openPrice &&
                  (currentSl == 0 || proposed_sl > currentSl) &&
                  (currentSl == 0 || (proposed_sl - currentSl) >= InpTrailingStep * _Point || InpTrailingStep == 0) ) // Allow update if step is 0
                 {
                  if(trade.PositionModify(positionTicket, proposed_sl, currentTp))
                    {
                     Print("Trailing stop updated for BUY #", positionTicket, " to ", DoubleToString(proposed_sl, _Digits));
                    }
                  else
                    {
                     Print("Error modifying trailing stop for BUY position #", positionTicket, ": ", trade.ResultRetcode(), " (", trade.ResultRetcodeDescription(), ")");
                    }
                 }
              }
           }
         else if(positionType == POSITION_TYPE_SELL)
           {
            currentPrice = SymbolInfoDouble(_Symbol, SYMBOL_ASK); // Correct: Use ASK to check against SELL position's profit
            if(currentPrice == 0) 
              { 
               Print("TrailingStopModifyOrders: Could not get ASK price for SELL position #", positionTicket); 
               continue; 
              }


            // Check if position is profitable enough to start trailing
            if(currentPrice <= openPrice - InpStartTrailingPoint * _Point)
              {
               // Calculate potential new SL: ASK price + TrailingStop distance
               double proposed_sl = currentPrice + InpTrailingStop * _Point;

               // Ensure new SL is below open price (making profit)
               // Ensure new SL is an improvement (lower) over current SL (or current SL is 0)
               // Ensure new SL respects the trailing step if current SL already exists (moves by at least InpTrailingStep)
               if(proposed_sl < openPrice && // SL must be more favorable than open price
                  (currentSl == 0 || proposed_sl < currentSl) && // Must be better than current SL, or current SL is not set
                  (currentSl == 0 || (currentSl - proposed_sl) >= InpTrailingStep * _Point || InpTrailingStep == 0) ) // Step condition
                 {
                  // Attempt to modify the position's SL
                  if(trade.PositionModify(positionTicket, proposed_sl, currentTp))
                    {
                     Print("Trailing stop updated for SELL position #", positionTicket, " to ", DoubleToString(proposed_sl, _Digits));
                    }
                  else
                    {
                     Print("Error modifying trailing stop for SELL position #", positionTicket, ": ", trade.ResultRetcode(), " (", trade.ResultRetcodeDescription(), ")");
                    }
                 }
              }
           }
        }
     }
  }

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
datetime g_lastBarTime = 0; // Stores the time of the last processed bar for new bar detection

void OnTick()
  {
   //--- Delete any "forming" lines from the previous tick, especially if a new bar has formed.
   //    This ensures that if a candle closes and ProcessNewBarTA draws its historical line,
   //    the "forming" line from when it WAS forming is removed.
   //    It also handles cleanup if a semafor disappears mid-candle.
   bool formingLinePotentiallyDeleted = false;
   if(ObjectFind(0, g_bullishFormingLineName) != -1)
     {
      ObjectDelete(0, g_bullishFormingLineName);
      formingLinePotentiallyDeleted = true;
     }
   if(ObjectFind(0, g_bearishFormingLineName) != -1)
     {
      ObjectDelete(0, g_bearishFormingLineName);
      formingLinePotentiallyDeleted = true;
     }

   //--- Clean up old historical entry lines first
   CleanUpOldLinesTA();

   //--- Safety check for pending indicator color
   if(ObjectFind(0,g_pendingIndicatorName) == 0) 
     {
      if (!g_tradeOnNextCandlePending && ObjectGetInteger(0, g_pendingIndicatorName, OBJPROP_BGCOLOR, 0) != clrLightGray)
        {
         ObjectSetInteger(0, g_pendingIndicatorName, OBJPROP_BGCOLOR, clrLightGray);
         // ChartRedraw(); // Avoid redundant redraws
        }
     }

   //--- New bar detection
   datetime newBarDTime = (datetime)SeriesInfoInteger(_Symbol, _Period, SERIES_LASTBAR_DATE);
   bool isNewBar = false;
   if(newBarDTime != g_lastBarTime)
     {
      isNewBar = true;
      g_lastBarTime = newBarDTime;
      // If it's a new bar, the forming lines from the *just closed* bar should already have been
      // deleted by the logic at the start of OnTick. ProcessNewBarTA will draw the historical line.
     }

   if(isNewBar)
     {
      Print("New bar detected at ", TimeToString(newBarDTime));
      // Process new bar for historical line drawing
      ProcessNewBarTA(); 

      // Process pending "next candle" trade
      if(g_tradeOnNextCandlePending && g_pendingOrderType != WRONG_VALUE)
        {
         Print("Executing pending order: ", EnumToString(g_pendingOrderType));
         ExecuteTrade(g_pendingOrderType);
        }
     }
   
   //--- Logic for current (forming) candle retracement line ---
   bool formingLineProcessed = false; // Flag to indicate if we attempted to draw/delete a forming line
   if(g_zzSemaforHandle != INVALID_HANDLE)
     {
      double currentHigh = iHigh(_Symbol, _Period, 0);
      double currentLow = iLow(_Symbol, _Period, 0);
      datetime currentTime = iTime(_Symbol, _Period, 0);

      if(currentHigh != 0 && currentLow != 0) // Ensure data is available
        {
         double currentRange = currentHigh - currentLow;
         if(currentRange > 0)
           {
            double highArrowBuffer[];
            double lowArrowBuffer[];
            bool isBearishSemafor = false;
            bool isBullishSemafor = false;

            // Check for Bearish Semafor (High arrow) on current bar
            if(CopyBuffer(g_zzSemaforHandle, 1, 0, 1, highArrowBuffer) == 1 && highArrowBuffer[0] > 0)
              {
               isBearishSemafor = true;
              }

            // Check for Bullish Semafor (Low arrow) on current bar
            if(CopyBuffer(g_zzSemaforHandle, 0, 0, 1, lowArrowBuffer) == 1 && lowArrowBuffer[0] > 0)
              {
               isBullishSemafor = true;
              }

            if(isBearishSemafor)
              {
               double retracementPrice = NormalizeDouble(currentHigh - ((InpSignalThreshold / 100.0) * currentRange), _Digits);
               UpdateFormingLineTA(g_bearishFormingLineName, currentTime, retracementPrice, g_bearishLineColor);
               formingLineProcessed = true;
               // Ensure no bullish forming line is present if bearish is active (optional, depends on desired behavior if both signals could appear)
               if(ObjectFind(0, g_bullishFormingLineName) != -1) ObjectDelete(0, g_bullishFormingLineName);
              }
            else // No bearish semafor, ensure line is removed
              {
               if(ObjectFind(0, g_bearishFormingLineName) != -1)
                 {
                  ObjectDelete(0, g_bearishFormingLineName);
                  formingLineProcessed = true;
                 }
              }

            if(isBullishSemafor)
              {
               double retracementPrice = NormalizeDouble(currentLow + ((InpSignalThreshold / 100.0) * currentRange), _Digits);
               UpdateFormingLineTA(g_bullishFormingLineName, currentTime, retracementPrice, g_bullishLineColor);
               formingLineProcessed = true;
                // Ensure no bearish forming line is present if bullish is active
               if(ObjectFind(0, g_bearishFormingLineName) != -1) ObjectDelete(0, g_bearishFormingLineName);
              }
            else // No bullish semafor, ensure line is removed
              {
               if(ObjectFind(0, g_bullishFormingLineName) != -1)
                 {
                  ObjectDelete(0, g_bullishFormingLineName);
                  formingLineProcessed = true;
                 }
              }
           }
        }
     }
   else // Semafor handle invalid, ensure no forming lines are present
     {
      if(ObjectFind(0, g_bullishFormingLineName) != -1)
        {
         ObjectDelete(0, g_bullishFormingLineName);
         formingLineProcessed = true;
        }
      if(ObjectFind(0, g_bearishFormingLineName) != -1)
        {
         ObjectDelete(0, g_bearishFormingLineName);
         formingLineProcessed = true;
        }
     }

   //--- Manage Trailing Stops for open positions
   TrailingStopModifyOrders();
   
   //--- Redraw chart if necessary ---
   // Redraw if a forming line was added/deleted/updated, or if one was potentially deleted at the start (e.g. on new bar)
   // ProcessNewBarTA also calls ChartRedraw if it draws lines.
   if(formingLineProcessed || formingLinePotentiallyDeleted)
     {
      ChartRedraw();
     }
  }
//+------------------------------------------------------------------+
//| ChartEvent function                                              |
//+------------------------------------------------------------------+
void OnChartEvent(const int id,
                  const long &lparam,
                  const double &dparam,
                  const string &sparam)
  {
//--- handle chart events
   if(id == CHARTEVENT_OBJECT_CLICK)
     {
      // Reset button state immediately after click
      ObjectSetInteger(0, sparam, OBJPROP_STATE, 0); // false
      ChartRedraw();

      if(sparam == g_buyButtonName)
        {
         // Print message now uses g_currentExecutionType, which is good.
         Print("Buy button clicked. Execution Type: ", EnumToString(g_currentExecutionType)); 
         if(g_currentExecutionType == EXECUTE_IMMEDIATE) // Condition already uses g_currentExecutionType
           {
            ExecuteTrade(ORDER_TYPE_BUY);
           }
         else // EXECUTE_ON_NEXT_CANDLE
           {
            if(g_tradeOnNextCandlePending && g_pendingOrderType == ORDER_TYPE_SELL)
              {
               Print("A Sell order is already pending for the next candle. Cannot set a Buy order simultaneously.");
              }
            else
              {
               g_tradeOnNextCandlePending = true;
               g_pendingOrderType = ORDER_TYPE_BUY;
               ObjectSetInteger(0, g_pendingIndicatorName, OBJPROP_BGCOLOR, clrGreen);
               Print("Buy order armed. Will execute on the next candle open.");
              }
           }
        }
      else if(sparam == g_sellButtonName)
        {
         // Print message now uses g_currentExecutionType, which is good.
         Print("Sell button clicked. Execution Type: ", EnumToString(g_currentExecutionType));
         if(g_currentExecutionType == EXECUTE_IMMEDIATE) // Condition already uses g_currentExecutionType
           {
            ExecuteTrade(ORDER_TYPE_SELL); // ExecuteTrade will reset indicator to gray
           }
         else // EXECUTE_ON_NEXT_CANDLE
           {
            if(g_tradeOnNextCandlePending && g_pendingOrderType == ORDER_TYPE_BUY)
              {
               Print("A Buy order is already pending for the next candle. Cannot set a Sell order simultaneously. Current pending Buy indicator remains (Green).");
              }
            else
              {
               g_tradeOnNextCandlePending = true;
               g_pendingOrderType = ORDER_TYPE_SELL;
               ObjectSetInteger(0, g_pendingIndicatorName, OBJPROP_BGCOLOR, clrRed);
               Print("Sell order armed. Will execute on the next candle open.");
              }
           }
        }
      else if(sparam == g_execTypeButtonName)
        {
         // Store old type to know if we are switching *from* NextCandle or *to* NextCandle
         EnumExecutionType previousExecutionType = g_currentExecutionType;
         
         // Toggle the execution type state
         if(g_currentExecutionType == EXECUTE_IMMEDIATE)
           {
            g_currentExecutionType = EXECUTE_ON_NEXT_CANDLE;
            ObjectSetString(0, g_execTypeButtonName, OBJPROP_TEXT, "Exec: Next");
            Print("Execution type changed to: Next Candle");
            // If switching to NextCandle and nothing is currently pending, ensure indicator is neutral gray.
            // If a trade becomes pending later (by clicking Buy/Sell), it will turn Red/Green.
            if (!g_tradeOnNextCandlePending)
              {
               ObjectSetInteger(0, g_pendingIndicatorName, OBJPROP_BGCOLOR, clrLightGray);
              }
           }
         else // Current was EXECUTE_ON_NEXT_CANDLE, now switching to EXECUTE_IMMEDIATE
           {
            g_currentExecutionType = EXECUTE_IMMEDIATE;
            ObjectSetString(0, g_execTypeButtonName, OBJPROP_TEXT, "Exec: Imm");
            Print("Execution type changed to: Immediate");

            // If a trade was pending from the previous NextCandle mode, cancel it and reset indicator.
            if (g_tradeOnNextCandlePending) 
              {
               ObjectSetInteger(0, g_pendingIndicatorName, OBJPROP_BGCOLOR, clrLightGray);
               g_tradeOnNextCandlePending = false; // Cancel the pending trade
               g_pendingOrderType = WRONG_VALUE;
               Print("Pending next candle trade automatically cancelled: mode switched to Immediate.");
              }
           }
         // ChartRedraw() is called at the start of CHARTEVENT_OBJECT_CLICK, which covers button text and indicator color changes.
         // No need for an explicit ChartRedraw() here unless there's a specific reason for immediate visual feedback before other logic.
        }
     }
  }
//+------------------------------------------------------------------+
